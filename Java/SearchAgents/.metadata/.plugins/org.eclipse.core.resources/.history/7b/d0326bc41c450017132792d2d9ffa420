package maze_solver;


public class MazeSolver {

	private int [][] mazeMap;
	private boolean [][] visited;
	private int startPosCol;
	private int startPosRow;
	
	public MazeSolver(int [][] mazeMap, int startPositionCol, int startPositionRow) {
		
		this.mazeMap = mazeMap;
		this.visited = new boolean[mazeMap.length][mazeMap.length];
		this.startPosCol = startPositionCol;
		this.startPosRow = startPositionRow;
		
	}
	
	public void findMazeExit() {
		
		try {
			
			dfs(startPosRow, startPosCol+1);
			System.out.println("No Solution Found!");
		} catch (RuntimeException e) {
			
			System.out.println("Route to Exit Found!");
		}
		
	}
	
	private void dfs(int i, int j) {
		
		System.out.println("Visiting i = " + i + ", j = " +j);
	
		if(this.mazeMap[i][j] == 3) {
			throw new RuntimeException();
		}
		
	
	
	}
	
}
